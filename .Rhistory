wbcd <- read.csv("D:/Modules/Module 18 - K-nearest neighbour/wbcd.csv")
View(wbcd)
View(wbcd)
# drop the id feature
wbcd <- wbcd[-1]
View(wbcd)
# table of diagnosis
table(wbcd$diagnosis)
str(wbcd)
# recode diagnosis as a factor
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
View(wbcd)
# table or proportions with more informative labels
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# summarize any three numeric features
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
View(normalize)
# test normalization function - result should be identical
normalize(c(0.01, 0.02, 0.03, 0.04, 0.05))
normalize(c(10, 20, 30, 40, 50))
# normalize the wbcd data
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
view(wbcd_n)
View(wbcd_n)
# confirm that normalization worked
summary(wbcd_n$area_mean)
# create training and test data
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
View(wbcd_train_labels)
wbcd_train_labels <- wbcd_train_labels[["diagnosis"]]
wbcd_test_labels <- wbcd[470:569, 1]
View(wbcd_train_labels)
View(wbcd_test_labels)
# load the "class" library
install.packages("class")
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k=21)
View(wbcd_test_pred)
View(wbcd_test_pred)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k=21)
# load the "class" library
install.packages("class")
install.packages("class")
install.packages("caret")
library(class)
library(caret)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k=21)
View(wbcd_test_pred)
# load the "gmodels" library
library(gmodels)
# Create the cross tabulation of predicted vs. actual
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq=FALSE)
